$RCSfile$ $Revision$ $Date$ $Source$ 

AI2TV 
HOWTO for AI2TV adminstrators.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- Table Of Contents                                                 -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1. Overview
2. Preparing Videos 
3. Starting the Workgroup calander
4. Starting Workflow server
5. Acknowledgements

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- 1. Overview                                                       -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

AI2TV is a video viewing application that allows for distributed
synchronous viewing sessions.  This document describes how to setup the
server side components to host AI2TV video sessions that allow
dispersed clients to view videos synchronously.

The AI2TV server is composed of the HTTP video server, the workgroup
calendar, the workflow server, and Elvin.  The video server is
basically a jpg image server that provides the video frames.  The
section on Preparing Videos for details on how to make videos
available for synchronous viewing.  The workgroup calendar provides
the capability of creating video sessions, and depends on Java
(http://java.sun.com).  Elvin (4.02) provides a publish/subscribe
communication layer and is a separate package that can be downloaded
from http://elvin.dstc.edu.au/.  The workflow server provides an
amount of micro-workflow that can give the clients a higher level of
video quality depending on the resources of the client (this component
is optional, see ???[citepaper] for details).  The workflow server
depends on Cougaar (9.6) and Ant XXX??? which can be downloaded from
http://www.cougaar.org.

To summarize, the components are:

1: HTTP server
2: Elvin Daemon (elvind)
3: Workgroup Calendar
4: Workflow Server

It is important to note that the Elvin daemon must be started before
the workgroup calendar and the workflow server.

Dependencies: Java 1.4.0+, Elvin, Ant, and Cougaar 9.6. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- 2. Preparing Video                                                -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

This section describes how to prepare a video for synchronous viewing.

First you must convert the video to .mpg format and extract the ppg frames
which you convert to jpg's.  This software was developed in the ???"lab"
under Professor Kender by Tiecheng 

<insert tiecheng's howto>

After creating the video sessions, put them in the web server folder
"ai2tv".  Make sure you set the correct permissions for these
directories.  The clients will look in these folders to see the
available videos.  

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- 3. Starting the Workgroup Calendar                                -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

This section describes how to start the workgroup calendar.  Make sure
you have Java 1.4.*+, that the classpath includes the wgserver jar,
and that the Elvin daemon has been started.  Then, simply start using
the console command line, like such:

c:\> java wgserver

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- 4. Starting the Workflow Server                                   -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Starting the workflow calendar is optional, but has been shown to
improve quality of service ???[cite paper].  

[insert Matias'] readme here.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- 5. Acknowledgements                                               -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Copyright (c) 2004, Columbia University, Programming Systems Laboratory

We would like to thank John Kender, Tiecheng Liu, and other members of
the High-Level Vision Lab for their assistance in using their
lecture-video semantic compression software.  We would also like to
thank the other members of the Programming Systems Lab, particularly
Matias Pelenur who implemented PSL's Little-JIL interpreter on top of
Workflakes/Cougaar.  Little-JIL was developed by Lee Osterweil's LASER
lab at the University of Massachusetts, Amherst. Cougaar was developed
by a DARPA-funded consortium; our main Cougaar contact was Nathan
Combs of BBN.  Siena was developed by the University of Colorado,
Boulder, in Alex Wolf's SERL lab. PSL is funded in part by National
Science Foundation grants CCR-0203876, EIA-0202063 and EIA-0071954,
and by Microsoft Research.