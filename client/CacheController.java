/* * @(#)CacheController.java * * Copyright (c) 2001: The Trustees of Columbia University in the City of New York.  All Rights Reserved * * Copyright (c) 2001: @author Dan Phung * Last modified by: Dan Phung (dp2041@cs.columbia.edu) * * CVS version control block - do not edit manually *  $RCSfile$ *  $Revision$ *  $Date$ *  $Source$ */package psl.ai2tv.client;import java.util.*;import java.io.*;import java.net.*;import siena.*;import siena.comm.*;import psl.ai2tv.gauge.FrameDesc;import psl.ai2tv.gauge.FrameIndexParser;/** * Controls the downloading and maintence of the frames. * * Note: the bandwidth window can be adjusted to buffer * the accuracy of the current bandwidth calculation. *  * TODO: * - need to think about permissions ie. protected vs. private * - must take care of the case where, if we skip a couple frames * and reach the end (thread is finished, run method has completed) * and the Viewer rewinds to a missing frame.  then the frame requested * must be downloaded at that time. * * WF related probes * 1) * * @version	$Revision$ * @author	Dan Phung (dp2041@cs.columbia.edu) */public class CacheController extends Thread {  // the higher level associated client  protected Client _client;  // members related to tracking what to download and what is downloaded.  protected FrameIndexParser framesInfo = null;  protected FrameDesc[][] framesData;  protected FrameDesc _currFrame;  protected int numLevels;  protected String _cacheDir;  protected String _baseURL;  protected Set _cache;  protected boolean _isActive;  protected boolean _interrupt;  // bandwidth measurement related members  protected int _bandwidthWindowMax;  protected int _bandwidthWindow;  protected long _totalBytes;  protected double _totalTime;  /**   * Create a CacheController.  Immediately begins to download at the client's    * set level.  Note that the downloading method holds intelligence to    * resume interrupted/incomplete downloads.   *    * @param c: parent client to download files for   * @param cacheDir: directory name of target downloaded files   * @param baseURL: base URL of the files to download from   */  public CacheController(Client c, String cacheDir, String baseURL) {    _client = c;    _cache = new HashSet();    if (cacheDir.endsWith("/"))      _cacheDir = cacheDir;    else       _cacheDir = cacheDir + "/";    _currFrame = null;    _interrupt = false;    _bandwidthWindow = 0;    _bandwidthWindowMax = 5;  // number of downloads to average against    _totalBytes = 0;    _totalTime = 0;    _baseURL = baseURL;    File f = new File(_cacheDir);    if (!f.exists()){      f.mkdir();    } else if (!f.isDirectory()) {      Client.err.println("Error: " + _cacheDir + " had existed, but is not a directory");      return;    }  }  void initialize(){    framesInfo = _client.getFramesInfo();    framesData = framesInfo.frameData();    numLevels = framesInfo.levels();  }  /**   * interrupt the current download   */  void interruptDownload() {    _interrupt = true;    this.interrupt();  }  /**   * set the next frame for the CacheController to download.   *   * NOTE: UNTESTED!!!   *   * @param frame: filename of next frame   */  public void setNextFrame(String frame){    if (frame.endsWith(".jpg"))      frame = frame.substring(0, (frame.length() - 4));    long nextframe = Long.parseLong(frame);  }  /**   * @return next frame in the level of the client.   */  /*  public FrameDesc getNextFrame() {    FrameDesc[] curr = framesInfo.frameData()[_client.getLevel()];    int index = progress[_client.getLevel()];    if (index < curr.length) {      if (! curr[index].isDownloaded()){	// try {	// Thread.currentThread().sleep(downloadInterval);	  Client.out.println("level <" + _client.getLevel() + 	  "> index <" + index + 	  "> bandwidth <" + getBandwidth() + ">");	  Client.out.println("CacheController downloading file: " + _baseURL + curr[index].getNum() + ".jpg");	if (downloadFile(_baseURL + curr[index].getNum() + ".jpg")){	  curr[index].setDownloaded(true);	  _client.loadImage(_cacheDir + curr[index].getNum() + ".jpg");	}      }      progress[_client.getLevel()] = index + 1;      _currFrame = curr[index];		      return currFrame;    } else {      return null;    }  }  */  /**   * gets the next frame in the level thats not downloaded   *    * @param level: the level of the frame   * @param now: the time at which to find corresponding next frame   * @return the next frame in the given level according to now.   */  FrameDesc getNextFrame(int level, long now) {    // Client.out.println("getting the next frame for : " + level + ", " + currentTime);    double time = (double)now /1000;    double start, num;    String file2check;    for (int i = 0; i < framesData[level].length; i++) {      start = (double)framesData[level][i].getStart()/30;      double end = (double)framesData[level][i].getEnd()/30;      file2check = framesData[level][i].getNum() + ".jpg";      // Client.debug.println("checking file: " + file2check + " if " + start + " >= " + time +      // "for level: " + level);      if (!isDownloaded(file2check) && start >= time) {	// Client.debug.println("< " + start + " ? " + time + " ? " + end + "> " + framesData[level][i].getNum());	return framesData[level][i];      }    }    return null;  }  /**   * return the current bandwidth value in kbyte/s   */  double getBandwidth() {    if (_totalTime == 0)      return 0;    else       return (_totalBytes / _totalTime / 1000);  }  /**   * @return frame currently downloading   */  FrameDesc getCurrFrame() {    return _currFrame;  }  /**   * continually download frames at this levell   */  public void run(){    if (framesInfo == null)      initialize();    _isActive = true;    FrameDesc fd = null;    while(_isActive){      // fd = getNextFrame();      _currFrame = getNextFrame(_client.getLevel(), _client.currentTime());      // Client.debug.println("CacheController (level: "+ _client.getLevel() + ") set to download: " +       // fd.getNum()/(double)30 + " ( " + fd.getStart()/(double)30 + " <" +       // _client.currentTime()/(double)1000+ "> " + fd.getEnd()/(double)30 + " )");      if (_currFrame == null) {	// wait for a while, maybe we'll change levels and have to go back, etc...	try {	  sleep(500);	} catch (InterruptedException e) {	  Client.err.println("CacheController downloading thread error: " + e);	}      } else {	if (downloadFile(_baseURL + _currFrame.getNum() + ".jpg")){	  _currFrame.setDownloaded(true);	  _client.loadImage(_cacheDir + _currFrame.getNum() + ".jpg");	} else {	  // Client.err.println("error in downloading");	}      }      // slow down the thread from hogging cpu      // try {      // 	sleep(100);      // } catch (InterruptedException e) {      // Client.err.println("CacheController downloading thread error: " + e);      // }    }    _isActive = false;  }  /**   * @return whether the CacheController is currently active.   */  public boolean isActive(){    return _isActive;  }  /**   * shutdown the CacheController thread.   */  void shutdown(){    _isActive = false;  }  /**   * check whether a file has been downloaded   * @param    * @return whether the specified file is already downloaded.   */  boolean isDownloaded(String filename){    return _cache.contains(_cacheDir + filename);  }  /**   * download a file from the given URL into the cache dir specified   * in cacheDir.  With smart download feature!  resumes a file from   * the right place if it had been interrupt earlier.   *   * @param fileURL: URL of the file to get.   */  boolean downloadFile(String fileURL) {    Client.out.println("CacheController.downloadFile fileURL: " + fileURL);    String[] tokens = fileURL.split("/");    String saveFile = _cacheDir + tokens[tokens.length - 1];    // if "cache" is "initialized" in the ctor, then we can do this: curr[index].setDownloaded(true);    // otherwise, we'll just check the filesystem, which takes longer!    URL url = null;    try {      url = new URL(fileURL);    } catch (MalformedURLException e){      Client.err.println("error in downloader: " + e);      return false;    }    if (url == null) {      Client.out.println("bad URL");      return false;    }          double currentTime = 0;    try {      // open the connection      URLConnection myConnection;      myConnection=url.openConnection();      // Client.out.println("downloading : " + fileURL);      // check that the file holds stuff      if (myConnection.getContentLength()==0) {	Client.out.println("Error Zero content.");	return false;      }      long i = myConnection.getContentLength();      // Client.out.println("downloading file length: " + myConnection.getContentLength());      if (i==-1) {	Client.out.println("Empty or invalid content.");	return false;      }      File newFile = new File (saveFile);      boolean append = false;      long resumeIndex = 0;      // Client.out.println("current file size: " + newFile.length());      if (newFile.exists()){	append = true;	resumeIndex = i - newFile.length();	if (resumeIndex == 0){	  _cache.add(saveFile);	  return true;	}      }      BufferedInputStream input = new BufferedInputStream(myConnection.getInputStream());      newFile.createNewFile();      BufferedOutputStream downloadFile = new BufferedOutputStream(new FileOutputStream(newFile, append));      int c;      currentTime = System.currentTimeMillis();      while (((c=input.read())!=-1) && (--i > 0)){	if (!append || i < resumeIndex){	  if (_interrupt) {	    Client.debug.println("!!! " + newFile + " interrupted in the midst of downloading!");	    _interrupt = false;	    return false;	  }	  downloadFile.write(c);	  downloadFile.flush();	}      }      currentTime = System.currentTimeMillis() - currentTime;      input.close();      downloadFile.close();      // BANDWIDTH related stuff      Client.out.println("total bytes: " + newFile.length() + " total time: " + currentTime);      if (_bandwidthWindow++ < _bandwidthWindow){	_totalBytes += newFile.length();	_totalTime += (currentTime / 1000);      } else {	_totalBytes = newFile.length();	_totalTime = (currentTime / 1000);	_bandwidthWindow = 0;      }          } catch (IOException e){      Client.out.println("IOException in CacheController.downloadFile(): " + e);      return false;    }    _cache.add(saveFile);    return true;  }  /**   * main is used as a point of access for testing   */  public static void main(String[] args){    // dp2041: testing possibility of threading this class    // conclusion = yes!    /*      CacheController cc = new CacheController(null, "frame_index.txt", 1,      "http://www1.cs.columbia.edu/~suhit/ai2tv/1/");      FrameDesc[] fd = new FrameDesc[166];      FrameDesc newFrame;      int i=0;      // for (; i<6; i++){      do{      newFrame = cc.getNextFrame();      Client.out.println("got frame: " + newFrame);      // fd[i++] = newFrame;      // cc.hierarchyDown(System.currentTimeMillis());      } while(newFrame != null);      // }      // cc.hierarchyDown(System.currentTimeMillis());      */  }}